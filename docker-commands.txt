#To pull a Docker image
$ docker pull nginx

#To run ngnix
$ docker run ngnix

#To access on local machine, we will have to expose port
$ docker run -p 8000:80 nginx

#To stop a container, we can run following command.
$ docker stop <container_id>

#To remove container
$ docker rm <contaner_id>

#You can run a container in background by passing it -d option.
$ docker run -p 8000:80 -d nginx

#You can view logs using the following command.
$ docker logs -f container_id

#To view all the running containers
$ docker ps

#To view all the containers irrespective of their status
$ docker ps --all

#To remove all the stopped containers
$ docker container prune


docker run busybox:1.24 echo "hello world"
docker run -i -t busybox:1.24 ls /

# run the docker in interactive mode
docker run -i -t <imagename>:<tag> 
      ex: docker run -i -t busybox:1.24

# list the current container
docker ps 

# list all the containers
docker ps -a

# sleeps the container for 1 sec (not sure) 
docker run --rm busybox:sleep 1

# creates a container with name provided
docker run --name <container-name> <image-name>:<tag> 

#runs the container in detached mode(-d) returns the container id 
docker run -d <image-name>:<tag> 

# display low level info on the container or image 
docker inspect <container-id> 

#get the logs    http:level-up.one/deep-dive-into-docker-logging 
docker logs <container-id>

#commit command saves the changes we made to the docker container's file system to a new image
docker commit <container-id> <repository_name>:<tag>
